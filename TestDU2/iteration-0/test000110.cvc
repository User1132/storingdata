n_args0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
n_args_11  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A-data-stat2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin-stat3  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
model_version4  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg005  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg016  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr17  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr39  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr410  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr511  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr612  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr713  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr814  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr915  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1016  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1117  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1218  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1319  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1420  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1521  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1622  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1723  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg0024  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1825  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1926  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg0227  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2028  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2129  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2230  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2331  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin32  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2433  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2534  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2635  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2736  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2837  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2938  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3039  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3140  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3241  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3342  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3443  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3544  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3645  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3746  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3847  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3948  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4049  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4150  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4251  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4352  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4453  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4554  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4655  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4756  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4857  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4958  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5059  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5160  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5261  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5362  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5463  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5564  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5665  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5766  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5867  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5968  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6069  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6170  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6271  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6372  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6473  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6574  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6675  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6776  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6877  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6978  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7079  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7180  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7281  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7382  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7483  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7584  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7685  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7786  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7887  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7988  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8089  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8190  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8291  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8392  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8493  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8594  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8695  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8796  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8897  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8998  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9099  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr91100  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr92101  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr93102  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr94103  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr95104  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr96105  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr97106  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr98107  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr99108  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr100109  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr101110  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr102111  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr103112  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr104113  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr105114  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr106115  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr107116  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr108117  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr109118  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr110119  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr111120  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr112121  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr113122  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr114123  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr115124  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr116125  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr117126  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr118127  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr119128  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr120129  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr121130  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr122131  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr123132  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr124133  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr125134  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr126135  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr127136  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr128137  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr129138  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr130139  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr131140  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr132141  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr133142  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr134143  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr135144  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr136145  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr137146  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr138147  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr139148  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( BVGT(0x00000002,(n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
))
 );
ASSERT( SBVGT((n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
),0x00000000)
 );
ASSERT( BVGT(0x00000003,(n_args_11[0x00000003] @ (n_args_11[0x00000002] @ (n_args_11[0x00000001] @ n_args_11[0x00000000]
)
)
))
 );
ASSERT( SBVGT((n_args_11[0x00000003] @ (n_args_11[0x00000002] @ (n_args_11[0x00000001] @ n_args_11[0x00000000]
)
)
),0x00000000)
 );
ASSERT( ( NOT( ((((0x01 = n_args_11[0x00000000]
) AND (0x00 = n_args_11[0x00000001]
)
) AND (0x00 = n_args_11[0x00000002]
)
) AND (0x00 = n_args_11[0x00000003]
)
))) );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A-data-stat2[0x0000000B] @ (A-data-stat2[0x0000000A] @ (A-data-stat2[0x00000009] @ A-data-stat2[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(A-data-stat2[0x0000003F] @ (A-data-stat2[0x0000003E] @ (A-data-stat2[0x0000003D] @ (A-data-stat2[0x0000003C] @ (A-data-stat2[0x0000003B] @ (A-data-stat2[0x0000003A] @ (A-data-stat2[0x00000039] @ A-data-stat2[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdin-stat3[0x0000000B] @ (stdin-stat3[0x0000000A] @ (stdin-stat3[0x00000009] @ stdin-stat3[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdin-stat3[0x0000003F] @ (stdin-stat3[0x0000003E] @ (stdin-stat3[0x0000003D] @ (stdin-stat3[0x0000003C] @ (stdin-stat3[0x0000003B] @ (stdin-stat3[0x0000003A] @ (stdin-stat3[0x00000039] @ stdin-stat3[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ((((0x01 = model_version4[0x00000000]
) AND (0x00 = model_version4[0x00000001]
)
) AND (0x00 = model_version4[0x00000002]
)
) AND (0x00 = model_version4[0x00000003]
)
) );
ASSERT( (0x2D = arg0024[0x00000000]
) );
ASSERT( ( NOT( (0x00 = arg0024[0x00000001]
))) );
ASSERT( ( NOT( (0x2D = arg0024[0x00000001]
))) );
ASSERT( (0x64 = BVSX(arg0024[0x00000001],32)
[7:0]
) );
ASSERT( (0x2D = arg0024[0x00000002]
) );
ASSERT( ( NOT( (0x00 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x27 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x38 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x39 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x3A = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x3B = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x3C = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x3D = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x3E = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x3F = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x30 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x31 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x32 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x33 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x34 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x35 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x36 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x37 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x28 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x29 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x2A = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x2B = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x2C = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x2D = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x2E = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x2F = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x20 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x21 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x22 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x23 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x24 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x25 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x26 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x08 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x09 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x0A = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x0B = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x0C = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x0D = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x07 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x78 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x79 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x7A = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x7B = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x7C = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x7D = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x7E = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x70 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x71 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x72 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x73 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x74 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x75 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x76 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x77 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x68 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x69 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x6A = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x6B = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x6C = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x6D = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x6E = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x6F = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x60 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x61 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x62 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x63 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x64 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x65 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x66 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x67 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x58 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x59 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x5A = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x5B = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x5C = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x5D = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x5E = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x5F = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x50 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x51 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x52 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x53 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x54 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x55 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x56 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x57 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x48 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x49 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x4A = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x4B = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x4C = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x4D = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x4E = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x4F = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x41 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x42 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x43 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x44 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x45 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x46 = arg0024[0x00000003]
))) );
ASSERT( ( NOT( (0x47 = arg0024[0x00000003]
))) );
ASSERT( (0x00 = arg0024[0x00000008]
) );
ASSERT( ( NOT( SBVGT(0x00000080,(0x000000 @ arg0024[0x00000003]
))
)) );
ASSERT( (0x08 = arg0024[0x00000004]
) );
ASSERT( (0x20 = arg0024[0x00000005]
) );
ASSERT( (0x08 = arg0024[0x00000006]
) );
ASSERT( (0x0B = arg0024[0x00000007]
) );
ASSERT( (0x2D = arg016[0x00000000]
) );
ASSERT( ( NOT( (0x00 = arg016[0x00000001]
))) );
ASSERT( ( NOT( (0x2D = arg016[0x00000001]
))) );
ASSERT( (0x58 = BVSX(arg016[0x00000001],32)
[7:0]
) );
ASSERT( (0x2D = arg0227[0x00000000]
) );
ASSERT( (0x00 = arg0227[0x00000001]
) );
ASSERT( ( NOT( (0x0A = stdin32[0x00000000]
))) );
ASSERT( (0x0A = stdin32[0x00000002]
) );
ASSERT( ( NOT( (0x5B = stdin32[0x00000000]
))) );
ASSERT( ( NOT( (0x5C = stdin32[0x00000000]
))) );
ASSERT( ( NOT( (0x2A = stdin32[0x00000000]
))) );
ASSERT( ( NOT( (0x3F = stdin32[0x00000000]
))) );
ASSERT( ( NOT( (0x00 = stdin32[0x00000000]
))) );
ASSERT( (0x5C = stdin32[0x00000001]
) );
ASSERT( (0x0A = stdin32[0x00000003]
) );
ASSERT( (0x0A = stdin32[0x00000004]
) );
ASSERT( (0x0A = stdin32[0x00000005]
) );
ASSERT( (0x0A = stdin32[0x00000006]
) );
ASSERT( (0x0A = stdin32[0x00000007]
) );
%----------------------------------------------------
QUERY( FALSE  );
