n_args0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
n_args_11  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A-data-stat2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin-stat3  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
model_version4  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg005  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr16  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg017  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr28  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr39  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr410  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr511  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr612  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr713  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr814  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr915  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1016  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1117  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( BVGT(0x00000002,(n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
))
 );
ASSERT( ( NOT( SBVGT((n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
),0x00000000)
)) );
ASSERT( BVGT(0x00000003,(n_args_11[0x00000003] @ (n_args_11[0x00000002] @ (n_args_11[0x00000001] @ n_args_11[0x00000000]
)
)
))
 );
ASSERT( SBVGT((n_args_11[0x00000003] @ (n_args_11[0x00000002] @ (n_args_11[0x00000001] @ n_args_11[0x00000000]
)
)
),0x00000000)
 );
ASSERT( ( NOT( ((((0x01 = n_args_11[0x00000000]
) AND (0x00 = n_args_11[0x00000001]
)
) AND (0x00 = n_args_11[0x00000002]
)
) AND (0x00 = n_args_11[0x00000003]
)
))) );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A-data-stat2[0x0000000B] @ (A-data-stat2[0x0000000A] @ (A-data-stat2[0x00000009] @ A-data-stat2[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(A-data-stat2[0x0000003F] @ (A-data-stat2[0x0000003E] @ (A-data-stat2[0x0000003D] @ (A-data-stat2[0x0000003C] @ (A-data-stat2[0x0000003B] @ (A-data-stat2[0x0000003A] @ (A-data-stat2[0x00000039] @ A-data-stat2[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdin-stat3[0x0000000B] @ (stdin-stat3[0x0000000A] @ (stdin-stat3[0x00000009] @ stdin-stat3[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdin-stat3[0x0000003F] @ (stdin-stat3[0x0000003E] @ (stdin-stat3[0x0000003D] @ (stdin-stat3[0x0000003C] @ (stdin-stat3[0x0000003B] @ (stdin-stat3[0x0000003A] @ (stdin-stat3[0x00000039] @ stdin-stat3[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ((((0x01 = model_version4[0x00000000]
) AND (0x00 = model_version4[0x00000001]
)
) AND (0x00 = model_version4[0x00000002]
)
) AND (0x00 = model_version4[0x00000003]
)
) );
ASSERT( ( NOT( (0x2D = arg005[0x00000000]
))) );
ASSERT( ( NOT( (0x00 = arg005[0x00000000]
))) );
ASSERT( (LET let_k_0 = arg005[0x00000000] IN 
((0x5E = let_k_0
) OR ((0x5B = let_k_0
) OR ((0x60 = let_k_0
) OR ((0x7C = let_k_0
) OR ((0x26 = let_k_0
) OR ((0x24 = let_k_0
) OR ((0x22 = let_k_0
) OR ((0x21 = let_k_0
) OR ((0x2A = let_k_0
) OR ((0x29 = let_k_0
) OR ((0x28 = let_k_0
) OR ((0x3E = let_k_0
) OR ((0x3D = let_k_0
) OR ((0x3C = let_k_0
) OR (0x3B = let_k_0
)
)
)
)
)
)
)
)
)
)
)
)
)
)
))  );
ASSERT( ( NOT( (0x00 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x38 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x39 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x3A = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x3B = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x3C = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x3D = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x3E = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x3F = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x30 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x31 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x32 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x33 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x34 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x35 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x36 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x37 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x28 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x29 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x2A = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x2B = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x2C = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x2D = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x2E = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x2F = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x20 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x21 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x22 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x23 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x24 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x25 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x26 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x27 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x08 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x09 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x0A = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x0B = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x0C = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x0D = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x07 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x78 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x79 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x7A = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x7B = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x7C = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x7D = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x7E = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x70 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x71 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x72 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x73 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x74 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x75 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x76 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x77 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x68 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x69 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x6A = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x6B = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x6C = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x6D = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x6E = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x6F = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x60 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x61 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x62 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x63 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x64 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x65 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x66 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x67 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x58 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x59 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x5A = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x5B = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x5C = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x5D = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x5E = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x5F = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x50 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x51 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x52 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x53 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x54 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x55 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x56 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x57 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x48 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x49 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x4A = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x4B = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x4C = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x4D = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x4E = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x4F = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x41 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x42 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x43 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x44 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x45 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x46 = arg005[0x00000001]
))) );
ASSERT( ( NOT( (0x47 = arg005[0x00000001]
))) );
ASSERT( ( NOT( SBVGT(0x00000080,(0x000000 @ arg005[0x00000001]
))
)) );
ASSERT( ( NOT( (0x2F = arg005[0x00000000]
))) );
ASSERT( (0x00 = arg017[0x00000001]
) );
ASSERT( (0x41 = arg017[0x00000000]
) );
ASSERT( (LET let_k_0 = ((((((((((((((((((((((((const_arr1117 WITH [0x00000000] := 0x08)
 WITH [0x00000001] := 0x00)
 WITH [0x00000002] := 0x00)
 WITH [0x00000003] := 0x00)
 WITH [0x00000004] := 0xAB)
 WITH [0x00000005] := 0xAB)
 WITH [0x00000006] := 0xAB)
 WITH [0x00000007] := 0xAB)
 WITH [0x00000008] := 0x78)
 WITH [0x00000009] := 0x80)
 WITH [0x0000000A] := 0x2D)
 WITH [0x0000000B] := 0x96)
 WITH [0x0000000C] := 0xCD)
 WITH [0x0000000D] := 0x55)
 WITH [0x0000000E] := 0x00)
 WITH [0x0000000F] := 0x00)
 WITH [0x00000010] := 0xD0)
 WITH [0x00000011] := 0x18)
 WITH [0x00000012] := 0xB7)
 WITH [0x00000013] := 0x94)
 WITH [0x00000014] := 0xCD)
 WITH [0x00000015] := 0x55)
 WITH [0x00000016] := 0x00)
 WITH [0x00000017] := 0x00)
,
let_k_1 = BVPLUS(64, 
0xFFFFAA326981ADF0, 
IF(((((((((0x00 = A-data-stat2[0x00000008]
) AND (0x00 = A-data-stat2[0x00000009]
)
) AND (0x00 = A-data-stat2[0x0000000A]
)
) AND (0x00 = A-data-stat2[0x0000000B]
)
) AND (0x00 = A-data-stat2[0x0000000C]
)
) AND (0x00 = A-data-stat2[0x0000000D]
)
) AND (0x00 = A-data-stat2[0x0000000E]
)
) AND (0x00 = A-data-stat2[0x0000000F]
)
))
THEN 0x0000000000000000
ELSE 0x000055CD967E5220
ENDIF)
[31:0] IN 
( NOT( (0x4 = ((((((((((((((((A-data-stat2 WITH [0x00000030] := 0x08)
 WITH [0x00000031] := 0x00)
 WITH [0x00000032] := 0x00)
 WITH [0x00000033] := 0x00)
 WITH [0x00000034] := 0x00)
 WITH [0x00000035] := 0x00)
 WITH [0x00000036] := 0x00)
 WITH [0x00000037] := 0x00)
 WITH [0x00000040] := 0x08)
 WITH [0x00000041] := 0x00)
 WITH [0x00000042] := 0x00)
 WITH [0x00000043] := 0x00)
 WITH [0x00000044] := 0x00)
 WITH [0x00000045] := 0x00)
 WITH [0x00000046] := 0x00)
 WITH [0x00000047] := 0x00)
[BVPLUS(64, 
0xFFFFAA326B48E749, 
(let_k_0[BVPLUS(32, 
0x00000007, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000006, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000005, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000004, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000003, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000002, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000001, 
let_k_1)
] @ let_k_0[let_k_1]
)
)
)
)
)
)
))
[31:0]][7:4]
))))  );
ASSERT( (LET let_k_0 = ((((((((((((((((((((((((const_arr1117 WITH [0x00000000] := 0x08)
 WITH [0x00000001] := 0x00)
 WITH [0x00000002] := 0x00)
 WITH [0x00000003] := 0x00)
 WITH [0x00000004] := 0xAB)
 WITH [0x00000005] := 0xAB)
 WITH [0x00000006] := 0xAB)
 WITH [0x00000007] := 0xAB)
 WITH [0x00000008] := 0x78)
 WITH [0x00000009] := 0x80)
 WITH [0x0000000A] := 0x2D)
 WITH [0x0000000B] := 0x96)
 WITH [0x0000000C] := 0xCD)
 WITH [0x0000000D] := 0x55)
 WITH [0x0000000E] := 0x00)
 WITH [0x0000000F] := 0x00)
 WITH [0x00000010] := 0xD0)
 WITH [0x00000011] := 0x18)
 WITH [0x00000012] := 0xB7)
 WITH [0x00000013] := 0x94)
 WITH [0x00000014] := 0xCD)
 WITH [0x00000015] := 0x55)
 WITH [0x00000016] := 0x00)
 WITH [0x00000017] := 0x00)
,
let_k_1 = BVPLUS(64, 
0xFFFFAA326981ADF0, 
IF(((((((((0x00 = A-data-stat2[0x00000008]
) AND (0x00 = A-data-stat2[0x00000009]
)
) AND (0x00 = A-data-stat2[0x0000000A]
)
) AND (0x00 = A-data-stat2[0x0000000B]
)
) AND (0x00 = A-data-stat2[0x0000000C]
)
) AND (0x00 = A-data-stat2[0x0000000D]
)
) AND (0x00 = A-data-stat2[0x0000000E]
)
) AND (0x00 = A-data-stat2[0x0000000F]
)
))
THEN 0x0000000000000000
ELSE 0x000055CD967E5220
ENDIF)
[31:0] IN 
( NOT( (0xA = ((((((((((((((((A-data-stat2 WITH [0x00000030] := 0x08)
 WITH [0x00000031] := 0x00)
 WITH [0x00000032] := 0x00)
 WITH [0x00000033] := 0x00)
 WITH [0x00000034] := 0x00)
 WITH [0x00000035] := 0x00)
 WITH [0x00000036] := 0x00)
 WITH [0x00000037] := 0x00)
 WITH [0x00000040] := 0x08)
 WITH [0x00000041] := 0x00)
 WITH [0x00000042] := 0x00)
 WITH [0x00000043] := 0x00)
 WITH [0x00000044] := 0x00)
 WITH [0x00000045] := 0x00)
 WITH [0x00000046] := 0x00)
 WITH [0x00000047] := 0x00)
[BVPLUS(64, 
0xFFFFAA326B48E749, 
(let_k_0[BVPLUS(32, 
0x00000007, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000006, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000005, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000004, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000003, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000002, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000001, 
let_k_1)
] @ let_k_0[let_k_1]
)
)
)
)
)
)
))
[31:0]][7:4]
))))  );
ASSERT( (LET let_k_0 = ((((((((((((((((((((((((const_arr1117 WITH [0x00000000] := 0x08)
 WITH [0x00000001] := 0x00)
 WITH [0x00000002] := 0x00)
 WITH [0x00000003] := 0x00)
 WITH [0x00000004] := 0xAB)
 WITH [0x00000005] := 0xAB)
 WITH [0x00000006] := 0xAB)
 WITH [0x00000007] := 0xAB)
 WITH [0x00000008] := 0x78)
 WITH [0x00000009] := 0x80)
 WITH [0x0000000A] := 0x2D)
 WITH [0x0000000B] := 0x96)
 WITH [0x0000000C] := 0xCD)
 WITH [0x0000000D] := 0x55)
 WITH [0x0000000E] := 0x00)
 WITH [0x0000000F] := 0x00)
 WITH [0x00000010] := 0xD0)
 WITH [0x00000011] := 0x18)
 WITH [0x00000012] := 0xB7)
 WITH [0x00000013] := 0x94)
 WITH [0x00000014] := 0xCD)
 WITH [0x00000015] := 0x55)
 WITH [0x00000016] := 0x00)
 WITH [0x00000017] := 0x00)
,
let_k_1 = BVPLUS(64, 
0xFFFFAA326981ADF0, 
IF(((((((((0x00 = A-data-stat2[0x00000008]
) AND (0x00 = A-data-stat2[0x00000009]
)
) AND (0x00 = A-data-stat2[0x0000000A]
)
) AND (0x00 = A-data-stat2[0x0000000B]
)
) AND (0x00 = A-data-stat2[0x0000000C]
)
) AND (0x00 = A-data-stat2[0x0000000D]
)
) AND (0x00 = A-data-stat2[0x0000000E]
)
) AND (0x00 = A-data-stat2[0x0000000F]
)
))
THEN 0x0000000000000000
ELSE 0x000055CD967E5220
ENDIF)
[31:0] IN 
( NOT( (0x4 = ((((((((((((((((A-data-stat2 WITH [0x00000030] := 0x08)
 WITH [0x00000031] := 0x00)
 WITH [0x00000032] := 0x00)
 WITH [0x00000033] := 0x00)
 WITH [0x00000034] := 0x00)
 WITH [0x00000035] := 0x00)
 WITH [0x00000036] := 0x00)
 WITH [0x00000037] := 0x00)
 WITH [0x00000040] := 0x08)
 WITH [0x00000041] := 0x00)
 WITH [0x00000042] := 0x00)
 WITH [0x00000043] := 0x00)
 WITH [0x00000044] := 0x00)
 WITH [0x00000045] := 0x00)
 WITH [0x00000046] := 0x00)
 WITH [0x00000047] := 0x00)
[BVPLUS(64, 
0xFFFFAA326B48E749, 
(let_k_0[BVPLUS(32, 
0x00000007, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000006, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000005, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000004, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000003, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000002, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000001, 
let_k_1)
] @ let_k_0[let_k_1]
)
)
)
)
)
)
))
[31:0]][7:4]
))))  );
ASSERT( (LET let_k_0 = ((((((((((((((((((((((((const_arr1117 WITH [0x00000000] := 0x08)
 WITH [0x00000001] := 0x00)
 WITH [0x00000002] := 0x00)
 WITH [0x00000003] := 0x00)
 WITH [0x00000004] := 0xAB)
 WITH [0x00000005] := 0xAB)
 WITH [0x00000006] := 0xAB)
 WITH [0x00000007] := 0xAB)
 WITH [0x00000008] := 0x78)
 WITH [0x00000009] := 0x80)
 WITH [0x0000000A] := 0x2D)
 WITH [0x0000000B] := 0x96)
 WITH [0x0000000C] := 0xCD)
 WITH [0x0000000D] := 0x55)
 WITH [0x0000000E] := 0x00)
 WITH [0x0000000F] := 0x00)
 WITH [0x00000010] := 0xD0)
 WITH [0x00000011] := 0x18)
 WITH [0x00000012] := 0xB7)
 WITH [0x00000013] := 0x94)
 WITH [0x00000014] := 0xCD)
 WITH [0x00000015] := 0x55)
 WITH [0x00000016] := 0x00)
 WITH [0x00000017] := 0x00)
,
let_k_1 = BVPLUS(64, 
0xFFFFAA326981ADF0, 
IF(((((((((0x00 = A-data-stat2[0x00000008]
) AND (0x00 = A-data-stat2[0x00000009]
)
) AND (0x00 = A-data-stat2[0x0000000A]
)
) AND (0x00 = A-data-stat2[0x0000000B]
)
) AND (0x00 = A-data-stat2[0x0000000C]
)
) AND (0x00 = A-data-stat2[0x0000000D]
)
) AND (0x00 = A-data-stat2[0x0000000E]
)
) AND (0x00 = A-data-stat2[0x0000000F]
)
))
THEN 0x0000000000000000
ELSE 0x000055CD967E5220
ENDIF)
[31:0] IN 
( NOT( (0xA = ((((((((((((((((A-data-stat2 WITH [0x00000030] := 0x08)
 WITH [0x00000031] := 0x00)
 WITH [0x00000032] := 0x00)
 WITH [0x00000033] := 0x00)
 WITH [0x00000034] := 0x00)
 WITH [0x00000035] := 0x00)
 WITH [0x00000036] := 0x00)
 WITH [0x00000037] := 0x00)
 WITH [0x00000040] := 0x08)
 WITH [0x00000041] := 0x00)
 WITH [0x00000042] := 0x00)
 WITH [0x00000043] := 0x00)
 WITH [0x00000044] := 0x00)
 WITH [0x00000045] := 0x00)
 WITH [0x00000046] := 0x00)
 WITH [0x00000047] := 0x00)
[BVPLUS(64, 
0xFFFFAA326B48E749, 
(let_k_0[BVPLUS(32, 
0x00000007, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000006, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000005, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000004, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000003, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000002, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000001, 
let_k_1)
] @ let_k_0[let_k_1]
)
)
)
)
)
)
))
[31:0]][7:4]
))))  );
%----------------------------------------------------
QUERY( FALSE  );
