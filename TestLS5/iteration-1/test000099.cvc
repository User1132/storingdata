n_args0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
n_args_11  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A-data-stat2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin-stat3  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
model_version4  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg005  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg016  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg027  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr18  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr29  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr310  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr411  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr512  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr613  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr714  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr815  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr916  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1017  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1118  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1219  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1320  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1421  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1522  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1623  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1724  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1825  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr1926  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2027  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2128  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2229  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2330  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2431  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2532  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2633  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2734  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2835  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr2936  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3037  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3138  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3239  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3340  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3441  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3542  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3643  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3744  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3845  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr3946  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4047  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4148  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4249  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4350  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4451  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4552  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4653  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4754  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr4855  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5056  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5157  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5258  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5359  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5460  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5561  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5662  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5763  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5864  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr5965  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6066  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6167  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6268  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6369  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6470  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6571  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6672  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6773  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr6974  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7075  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7176  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7277  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7378  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7479  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg0080  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7581  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7682  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7783  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7884  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr7985  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8086  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8187  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8288  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8389  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8490  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8591  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8692  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8793  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8894  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr8995  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9096  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9197  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9298  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr9399  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr94100  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr95101  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr96102  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr97103  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr98104  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr99105  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr100106  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr101107  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr102108  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr103109  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr104110  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr105111  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr106112  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr107113  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr108114  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr109115  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr110116  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr111117  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr112118  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr113119  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr114120  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr115121  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr116122  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr117123  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr118124  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr119125  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr120126  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr121127  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr122128  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr123129  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr124130  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr125131  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr126132  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr127133  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr128134  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr129135  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr130136  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr131137  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr132138  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr133139  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr134140  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr135141  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr136142  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr137143  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr138144  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr139145  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr140146  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr141147  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr142148  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr143149  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr144150  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr145151  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr146152  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr147153  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr148154  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr149155  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr150156  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr151157  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr152158  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr153159  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr154160  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr155161  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr156162  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr157163  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr158164  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr159165  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr160166  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr161167  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr162168  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr163169  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr164170  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr165171  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr166172  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr167173  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr168174  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr169175  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr170176  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr171177  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr172178  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr173179  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr174180  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr175181  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr176182  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr177183  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr178184  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr179185  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr180186  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr181187  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr182188  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr183189  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr184190  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr185191  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr186192  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr187193  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr188194  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr189195  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr190196  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr191197  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr192198  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr193199  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr194200  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr195201  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr196202  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr197203  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr198204  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr199205  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr200206  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr201207  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr202208  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( BVGT(0x00000002,(n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
))
 );
ASSERT( SBVGT((n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
),0x00000000)
 );
ASSERT( BVGT(0x00000003,(n_args_11[0x00000003] @ (n_args_11[0x00000002] @ (n_args_11[0x00000001] @ n_args_11[0x00000000]
)
)
))
 );
ASSERT( SBVGT((n_args_11[0x00000003] @ (n_args_11[0x00000002] @ (n_args_11[0x00000001] @ n_args_11[0x00000000]
)
)
),0x00000000)
 );
ASSERT( ( NOT( ((((0x01 = n_args_11[0x00000000]
) AND (0x00 = n_args_11[0x00000001]
)
) AND (0x00 = n_args_11[0x00000002]
)
) AND (0x00 = n_args_11[0x00000003]
)
))) );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A-data-stat2[0x0000000B] @ (A-data-stat2[0x0000000A] @ (A-data-stat2[0x00000009] @ A-data-stat2[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(A-data-stat2[0x0000003F] @ (A-data-stat2[0x0000003E] @ (A-data-stat2[0x0000003D] @ (A-data-stat2[0x0000003C] @ (A-data-stat2[0x0000003B] @ (A-data-stat2[0x0000003A] @ (A-data-stat2[0x00000039] @ A-data-stat2[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdin-stat3[0x0000000B] @ (stdin-stat3[0x0000000A] @ (stdin-stat3[0x00000009] @ stdin-stat3[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdin-stat3[0x0000003F] @ (stdin-stat3[0x0000003E] @ (stdin-stat3[0x0000003D] @ (stdin-stat3[0x0000003C] @ (stdin-stat3[0x0000003B] @ (stdin-stat3[0x0000003A] @ (stdin-stat3[0x00000039] @ stdin-stat3[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ((((0x01 = model_version4[0x00000000]
) AND (0x00 = model_version4[0x00000001]
)
) AND (0x00 = model_version4[0x00000002]
)
) AND (0x00 = model_version4[0x00000003]
)
) );
ASSERT( (0x2D = arg005[0x00000000]
) );
ASSERT( (0x2D = arg005[0x00000001]
) );
ASSERT( (0x00 = arg005[0x00000004]
) );
ASSERT( (0x6E = arg005[0x00000002]
) );
ASSERT( (0x75 = arg005[0x00000003]
) );
ASSERT( (0x00 = arg016[0x00000000]
) );
ASSERT( (0x00 = arg027[0x00000001]
) );
ASSERT( (0x41 = arg027[0x00000000]
) );
ASSERT( (LET let_k_0 = ((((((((((((((((((((((((const_arr3542 WITH [0x00000000] := 0x08)
 WITH [0x00000001] := 0x00)
 WITH [0x00000002] := 0x00)
 WITH [0x00000003] := 0x00)
 WITH [0x00000004] := 0xAB)
 WITH [0x00000005] := 0xAB)
 WITH [0x00000006] := 0xAB)
 WITH [0x00000007] := 0xAB)
 WITH [0x00000008] := 0xA8)
 WITH [0x00000009] := 0x47)
 WITH [0x0000000A] := 0x98)
 WITH [0x0000000B] := 0x57)
 WITH [0x0000000C] := 0xF7)
 WITH [0x0000000D] := 0x55)
 WITH [0x0000000E] := 0x00)
 WITH [0x0000000F] := 0x00)
 WITH [0x00000010] := 0x10)
 WITH [0x00000011] := 0x5B)
 WITH [0x00000012] := 0x65)
 WITH [0x00000013] := 0x56)
 WITH [0x00000014] := 0xF7)
 WITH [0x00000015] := 0x55)
 WITH [0x00000016] := 0x00)
 WITH [0x00000017] := 0x00)
,
let_k_1 = BVPLUS(64, 
0xFFFFAA08A8198490, 
IF(((((((((0x00 = A-data-stat2[0x00000008]
) AND (0x00 = A-data-stat2[0x00000009]
)
) AND (0x00 = A-data-stat2[0x0000000A]
)
) AND (0x00 = A-data-stat2[0x0000000B]
)
) AND (0x00 = A-data-stat2[0x0000000C]
)
) AND (0x00 = A-data-stat2[0x0000000D]
)
) AND (0x00 = A-data-stat2[0x0000000E]
)
) AND (0x00 = A-data-stat2[0x0000000F]
)
))
THEN 0x0000000000000000
ELSE 0x000055F757E67B80
ENDIF)
[31:0],
let_k_2 = ((((((((((((((((A-data-stat2 WITH [0x00000030] := 0x08)
 WITH [0x00000031] := 0x00)
 WITH [0x00000032] := 0x00)
 WITH [0x00000033] := 0x00)
 WITH [0x00000034] := 0x00)
 WITH [0x00000035] := 0x00)
 WITH [0x00000036] := 0x00)
 WITH [0x00000037] := 0x00)
 WITH [0x00000040] := 0x08)
 WITH [0x00000041] := 0x00)
 WITH [0x00000042] := 0x00)
 WITH [0x00000043] := 0x00)
 WITH [0x00000044] := 0x00)
 WITH [0x00000045] := 0x00)
 WITH [0x00000046] := 0x00)
 WITH [0x00000047] := 0x00)
,
let_k_3 = (let_k_0[BVPLUS(32, 
0x00000007, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000006, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000005, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000004, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000003, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000002, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000001, 
let_k_1)
] @ let_k_0[let_k_1]
)
)
)
)
)
)
) IN 
((((((((0x00 = let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA4F0, 
let_k_3)
[31:0]]
) AND (0x00 = let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA4F1, 
let_k_3)
[31:0]]
)
) AND (0x00 = let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA4F2, 
let_k_3)
[31:0]]
)
) AND (0x00 = let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA4F3, 
let_k_3)
[31:0]]
)
) AND (0x00 = let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA4F4, 
let_k_3)
[31:0]]
)
) AND (0x00 = let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA4F5, 
let_k_3)
[31:0]]
)
) AND (0x00 = let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA4F6, 
let_k_3)
[31:0]]
)
) AND (0x00 = let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA4F7, 
let_k_3)
[31:0]]
)
))  );
ASSERT( (LET let_k_0 = ((((((((((((((((((((((((const_arr3542 WITH [0x00000000] := 0x08)
 WITH [0x00000001] := 0x00)
 WITH [0x00000002] := 0x00)
 WITH [0x00000003] := 0x00)
 WITH [0x00000004] := 0xAB)
 WITH [0x00000005] := 0xAB)
 WITH [0x00000006] := 0xAB)
 WITH [0x00000007] := 0xAB)
 WITH [0x00000008] := 0xA8)
 WITH [0x00000009] := 0x47)
 WITH [0x0000000A] := 0x98)
 WITH [0x0000000B] := 0x57)
 WITH [0x0000000C] := 0xF7)
 WITH [0x0000000D] := 0x55)
 WITH [0x0000000E] := 0x00)
 WITH [0x0000000F] := 0x00)
 WITH [0x00000010] := 0x10)
 WITH [0x00000011] := 0x5B)
 WITH [0x00000012] := 0x65)
 WITH [0x00000013] := 0x56)
 WITH [0x00000014] := 0xF7)
 WITH [0x00000015] := 0x55)
 WITH [0x00000016] := 0x00)
 WITH [0x00000017] := 0x00)
,
let_k_1 = BVPLUS(64, 
0xFFFFAA08A8198490, 
IF(((((((((0x00 = A-data-stat2[0x00000008]
) AND (0x00 = A-data-stat2[0x00000009]
)
) AND (0x00 = A-data-stat2[0x0000000A]
)
) AND (0x00 = A-data-stat2[0x0000000B]
)
) AND (0x00 = A-data-stat2[0x0000000C]
)
) AND (0x00 = A-data-stat2[0x0000000D]
)
) AND (0x00 = A-data-stat2[0x0000000E]
)
) AND (0x00 = A-data-stat2[0x0000000F]
)
))
THEN 0x0000000000000000
ELSE 0x000055F757E67B80
ENDIF)
[31:0] IN 
( NOT( (0xA = ((((((((((((((((A-data-stat2 WITH [0x00000030] := 0x08)
 WITH [0x00000031] := 0x00)
 WITH [0x00000032] := 0x00)
 WITH [0x00000033] := 0x00)
 WITH [0x00000034] := 0x00)
 WITH [0x00000035] := 0x00)
 WITH [0x00000036] := 0x00)
 WITH [0x00000037] := 0x00)
 WITH [0x00000040] := 0x08)
 WITH [0x00000041] := 0x00)
 WITH [0x00000042] := 0x00)
 WITH [0x00000043] := 0x00)
 WITH [0x00000044] := 0x00)
 WITH [0x00000045] := 0x00)
 WITH [0x00000046] := 0x00)
 WITH [0x00000047] := 0x00)
[BVPLUS(64, 
0xFFFFAA08A99AA509, 
(let_k_0[BVPLUS(32, 
0x00000007, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000006, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000005, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000004, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000003, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000002, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000001, 
let_k_1)
] @ let_k_0[let_k_1]
)
)
)
)
)
)
))
[31:0]][7:4]
))))  );
ASSERT( (LET let_k_0 = ((((((((((((((((((((((((const_arr3542 WITH [0x00000000] := 0x08)
 WITH [0x00000001] := 0x00)
 WITH [0x00000002] := 0x00)
 WITH [0x00000003] := 0x00)
 WITH [0x00000004] := 0xAB)
 WITH [0x00000005] := 0xAB)
 WITH [0x00000006] := 0xAB)
 WITH [0x00000007] := 0xAB)
 WITH [0x00000008] := 0xA8)
 WITH [0x00000009] := 0x47)
 WITH [0x0000000A] := 0x98)
 WITH [0x0000000B] := 0x57)
 WITH [0x0000000C] := 0xF7)
 WITH [0x0000000D] := 0x55)
 WITH [0x0000000E] := 0x00)
 WITH [0x0000000F] := 0x00)
 WITH [0x00000010] := 0x10)
 WITH [0x00000011] := 0x5B)
 WITH [0x00000012] := 0x65)
 WITH [0x00000013] := 0x56)
 WITH [0x00000014] := 0xF7)
 WITH [0x00000015] := 0x55)
 WITH [0x00000016] := 0x00)
 WITH [0x00000017] := 0x00)
,
let_k_1 = BVPLUS(64, 
0xFFFFAA08A8198490, 
IF(((((((((0x00 = A-data-stat2[0x00000008]
) AND (0x00 = A-data-stat2[0x00000009]
)
) AND (0x00 = A-data-stat2[0x0000000A]
)
) AND (0x00 = A-data-stat2[0x0000000B]
)
) AND (0x00 = A-data-stat2[0x0000000C]
)
) AND (0x00 = A-data-stat2[0x0000000D]
)
) AND (0x00 = A-data-stat2[0x0000000E]
)
) AND (0x00 = A-data-stat2[0x0000000F]
)
))
THEN 0x0000000000000000
ELSE 0x000055F757E67B80
ENDIF)
[31:0] IN 
(0x4 = ((((((((((((((((A-data-stat2 WITH [0x00000030] := 0x08)
 WITH [0x00000031] := 0x00)
 WITH [0x00000032] := 0x00)
 WITH [0x00000033] := 0x00)
 WITH [0x00000034] := 0x00)
 WITH [0x00000035] := 0x00)
 WITH [0x00000036] := 0x00)
 WITH [0x00000037] := 0x00)
 WITH [0x00000040] := 0x08)
 WITH [0x00000041] := 0x00)
 WITH [0x00000042] := 0x00)
 WITH [0x00000043] := 0x00)
 WITH [0x00000044] := 0x00)
 WITH [0x00000045] := 0x00)
 WITH [0x00000046] := 0x00)
 WITH [0x00000047] := 0x00)
[BVPLUS(64, 
0xFFFFAA08A99AA509, 
(let_k_0[BVPLUS(32, 
0x00000007, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000006, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000005, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000004, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000003, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000002, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000001, 
let_k_1)
] @ let_k_0[let_k_1]
)
)
)
)
)
)
))
[31:0]][7:4]
))  );
ASSERT( (LET let_k_0 = ((((((((((((((((((((((((const_arr3542 WITH [0x00000000] := 0x08)
 WITH [0x00000001] := 0x00)
 WITH [0x00000002] := 0x00)
 WITH [0x00000003] := 0x00)
 WITH [0x00000004] := 0xAB)
 WITH [0x00000005] := 0xAB)
 WITH [0x00000006] := 0xAB)
 WITH [0x00000007] := 0xAB)
 WITH [0x00000008] := 0xA8)
 WITH [0x00000009] := 0x47)
 WITH [0x0000000A] := 0x98)
 WITH [0x0000000B] := 0x57)
 WITH [0x0000000C] := 0xF7)
 WITH [0x0000000D] := 0x55)
 WITH [0x0000000E] := 0x00)
 WITH [0x0000000F] := 0x00)
 WITH [0x00000010] := 0x10)
 WITH [0x00000011] := 0x5B)
 WITH [0x00000012] := 0x65)
 WITH [0x00000013] := 0x56)
 WITH [0x00000014] := 0xF7)
 WITH [0x00000015] := 0x55)
 WITH [0x00000016] := 0x00)
 WITH [0x00000017] := 0x00)
,
let_k_1 = BVPLUS(64, 
0xFFFFAA08A8198490, 
IF(((((((((0x00 = A-data-stat2[0x00000008]
) AND (0x00 = A-data-stat2[0x00000009]
)
) AND (0x00 = A-data-stat2[0x0000000A]
)
) AND (0x00 = A-data-stat2[0x0000000B]
)
) AND (0x00 = A-data-stat2[0x0000000C]
)
) AND (0x00 = A-data-stat2[0x0000000D]
)
) AND (0x00 = A-data-stat2[0x0000000E]
)
) AND (0x00 = A-data-stat2[0x0000000F]
)
))
THEN 0x0000000000000000
ELSE 0x000055F757E67B80
ENDIF)
[31:0],
let_k_2 = ((((((((((((((((A-data-stat2 WITH [0x00000030] := 0x08)
 WITH [0x00000031] := 0x00)
 WITH [0x00000032] := 0x00)
 WITH [0x00000033] := 0x00)
 WITH [0x00000034] := 0x00)
 WITH [0x00000035] := 0x00)
 WITH [0x00000036] := 0x00)
 WITH [0x00000037] := 0x00)
 WITH [0x00000040] := 0x08)
 WITH [0x00000041] := 0x00)
 WITH [0x00000042] := 0x00)
 WITH [0x00000043] := 0x00)
 WITH [0x00000044] := 0x00)
 WITH [0x00000045] := 0x00)
 WITH [0x00000046] := 0x00)
 WITH [0x00000047] := 0x00)
,
let_k_3 = (let_k_0[BVPLUS(32, 
0x00000007, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000006, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000005, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000004, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000003, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000002, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000001, 
let_k_1)
] @ let_k_0[let_k_1]
)
)
)
)
)
)
) IN 
( NOT( BVGT(0x0000000A,(let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA50F, 
let_k_3)
[31:0]] @ (let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA50E, 
let_k_3)
[31:0]] @ (let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA50D, 
let_k_3)
[31:0]] @ let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA50C, 
let_k_3)
[31:0]]
)
)
))
)))  );
ASSERT( (LET let_k_0 = ((((((((((((((((((((((((const_arr3542 WITH [0x00000000] := 0x08)
 WITH [0x00000001] := 0x00)
 WITH [0x00000002] := 0x00)
 WITH [0x00000003] := 0x00)
 WITH [0x00000004] := 0xAB)
 WITH [0x00000005] := 0xAB)
 WITH [0x00000006] := 0xAB)
 WITH [0x00000007] := 0xAB)
 WITH [0x00000008] := 0xA8)
 WITH [0x00000009] := 0x47)
 WITH [0x0000000A] := 0x98)
 WITH [0x0000000B] := 0x57)
 WITH [0x0000000C] := 0xF7)
 WITH [0x0000000D] := 0x55)
 WITH [0x0000000E] := 0x00)
 WITH [0x0000000F] := 0x00)
 WITH [0x00000010] := 0x10)
 WITH [0x00000011] := 0x5B)
 WITH [0x00000012] := 0x65)
 WITH [0x00000013] := 0x56)
 WITH [0x00000014] := 0xF7)
 WITH [0x00000015] := 0x55)
 WITH [0x00000016] := 0x00)
 WITH [0x00000017] := 0x00)
,
let_k_1 = BVPLUS(64, 
0xFFFFAA08A8198490, 
IF(((((((((0x00 = A-data-stat2[0x00000008]
) AND (0x00 = A-data-stat2[0x00000009]
)
) AND (0x00 = A-data-stat2[0x0000000A]
)
) AND (0x00 = A-data-stat2[0x0000000B]
)
) AND (0x00 = A-data-stat2[0x0000000C]
)
) AND (0x00 = A-data-stat2[0x0000000D]
)
) AND (0x00 = A-data-stat2[0x0000000E]
)
) AND (0x00 = A-data-stat2[0x0000000F]
)
))
THEN 0x0000000000000000
ELSE 0x000055F757E67B80
ENDIF)
[31:0],
let_k_2 = ((((((((((((((((A-data-stat2 WITH [0x00000030] := 0x08)
 WITH [0x00000031] := 0x00)
 WITH [0x00000032] := 0x00)
 WITH [0x00000033] := 0x00)
 WITH [0x00000034] := 0x00)
 WITH [0x00000035] := 0x00)
 WITH [0x00000036] := 0x00)
 WITH [0x00000037] := 0x00)
 WITH [0x00000040] := 0x08)
 WITH [0x00000041] := 0x00)
 WITH [0x00000042] := 0x00)
 WITH [0x00000043] := 0x00)
 WITH [0x00000044] := 0x00)
 WITH [0x00000045] := 0x00)
 WITH [0x00000046] := 0x00)
 WITH [0x00000047] := 0x00)
,
let_k_3 = (let_k_0[BVPLUS(32, 
0x00000007, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000006, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000005, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000004, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000003, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000002, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000001, 
let_k_1)
] @ let_k_0[let_k_1]
)
)
)
)
)
)
) IN 
BVGT(0x0000000A,BVDIV(32, 
(let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA50F, 
let_k_3)
[31:0]] @ (let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA50E, 
let_k_3)
[31:0]] @ (let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA50D, 
let_k_3)
[31:0]] @ let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA50C, 
let_k_3)
[31:0]]
)
)
), 
0x0000000A)
)
)  );
ASSERT( (LET let_k_0 = ((((((((((((((((((((((((const_arr3542 WITH [0x00000000] := 0x08)
 WITH [0x00000001] := 0x00)
 WITH [0x00000002] := 0x00)
 WITH [0x00000003] := 0x00)
 WITH [0x00000004] := 0xAB)
 WITH [0x00000005] := 0xAB)
 WITH [0x00000006] := 0xAB)
 WITH [0x00000007] := 0xAB)
 WITH [0x00000008] := 0xA8)
 WITH [0x00000009] := 0x47)
 WITH [0x0000000A] := 0x98)
 WITH [0x0000000B] := 0x57)
 WITH [0x0000000C] := 0xF7)
 WITH [0x0000000D] := 0x55)
 WITH [0x0000000E] := 0x00)
 WITH [0x0000000F] := 0x00)
 WITH [0x00000010] := 0x10)
 WITH [0x00000011] := 0x5B)
 WITH [0x00000012] := 0x65)
 WITH [0x00000013] := 0x56)
 WITH [0x00000014] := 0xF7)
 WITH [0x00000015] := 0x55)
 WITH [0x00000016] := 0x00)
 WITH [0x00000017] := 0x00)
,
let_k_1 = BVPLUS(64, 
0xFFFFAA08A8198490, 
IF(((((((((0x00 = A-data-stat2[0x00000008]
) AND (0x00 = A-data-stat2[0x00000009]
)
) AND (0x00 = A-data-stat2[0x0000000A]
)
) AND (0x00 = A-data-stat2[0x0000000B]
)
) AND (0x00 = A-data-stat2[0x0000000C]
)
) AND (0x00 = A-data-stat2[0x0000000D]
)
) AND (0x00 = A-data-stat2[0x0000000E]
)
) AND (0x00 = A-data-stat2[0x0000000F]
)
))
THEN 0x0000000000000000
ELSE 0x000055F757E67B80
ENDIF)
[31:0],
let_k_2 = ((((((((((((((((A-data-stat2 WITH [0x00000030] := 0x08)
 WITH [0x00000031] := 0x00)
 WITH [0x00000032] := 0x00)
 WITH [0x00000033] := 0x00)
 WITH [0x00000034] := 0x00)
 WITH [0x00000035] := 0x00)
 WITH [0x00000036] := 0x00)
 WITH [0x00000037] := 0x00)
 WITH [0x00000040] := 0x08)
 WITH [0x00000041] := 0x00)
 WITH [0x00000042] := 0x00)
 WITH [0x00000043] := 0x00)
 WITH [0x00000044] := 0x00)
 WITH [0x00000045] := 0x00)
 WITH [0x00000046] := 0x00)
 WITH [0x00000047] := 0x00)
,
let_k_3 = (let_k_0[BVPLUS(32, 
0x00000007, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000006, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000005, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000004, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000003, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000002, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000001, 
let_k_1)
] @ let_k_0[let_k_1]
)
)
)
)
)
)
) IN 
BVGT(0x0000000A,(let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA513, 
let_k_3)
[31:0]] @ (let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA512, 
let_k_3)
[31:0]] @ (let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA511, 
let_k_3)
[31:0]] @ let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA510, 
let_k_3)
[31:0]]
)
)
))
)  );
ASSERT( (LET let_k_0 = ((((((((((((((((((((((((const_arr3542 WITH [0x00000000] := 0x08)
 WITH [0x00000001] := 0x00)
 WITH [0x00000002] := 0x00)
 WITH [0x00000003] := 0x00)
 WITH [0x00000004] := 0xAB)
 WITH [0x00000005] := 0xAB)
 WITH [0x00000006] := 0xAB)
 WITH [0x00000007] := 0xAB)
 WITH [0x00000008] := 0xA8)
 WITH [0x00000009] := 0x47)
 WITH [0x0000000A] := 0x98)
 WITH [0x0000000B] := 0x57)
 WITH [0x0000000C] := 0xF7)
 WITH [0x0000000D] := 0x55)
 WITH [0x0000000E] := 0x00)
 WITH [0x0000000F] := 0x00)
 WITH [0x00000010] := 0x10)
 WITH [0x00000011] := 0x5B)
 WITH [0x00000012] := 0x65)
 WITH [0x00000013] := 0x56)
 WITH [0x00000014] := 0xF7)
 WITH [0x00000015] := 0x55)
 WITH [0x00000016] := 0x00)
 WITH [0x00000017] := 0x00)
,
let_k_1 = BVPLUS(64, 
0xFFFFAA08A8198490, 
IF(((((((((0x00 = A-data-stat2[0x00000008]
) AND (0x00 = A-data-stat2[0x00000009]
)
) AND (0x00 = A-data-stat2[0x0000000A]
)
) AND (0x00 = A-data-stat2[0x0000000B]
)
) AND (0x00 = A-data-stat2[0x0000000C]
)
) AND (0x00 = A-data-stat2[0x0000000D]
)
) AND (0x00 = A-data-stat2[0x0000000E]
)
) AND (0x00 = A-data-stat2[0x0000000F]
)
))
THEN 0x0000000000000000
ELSE 0x000055F757E67B80
ENDIF)
[31:0],
let_k_2 = ((((((((((((((((A-data-stat2 WITH [0x00000030] := 0x08)
 WITH [0x00000031] := 0x00)
 WITH [0x00000032] := 0x00)
 WITH [0x00000033] := 0x00)
 WITH [0x00000034] := 0x00)
 WITH [0x00000035] := 0x00)
 WITH [0x00000036] := 0x00)
 WITH [0x00000037] := 0x00)
 WITH [0x00000040] := 0x08)
 WITH [0x00000041] := 0x00)
 WITH [0x00000042] := 0x00)
 WITH [0x00000043] := 0x00)
 WITH [0x00000044] := 0x00)
 WITH [0x00000045] := 0x00)
 WITH [0x00000046] := 0x00)
 WITH [0x00000047] := 0x00)
,
let_k_3 = (let_k_0[BVPLUS(32, 
0x00000007, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000006, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000005, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000004, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000003, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000002, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000001, 
let_k_1)
] @ let_k_0[let_k_1]
)
)
)
)
)
)
) IN 
(0x30 = BVPLUS(32, 
0x00000030, 
BVMOD(32, 
(let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA513, 
let_k_3)
[31:0]] @ (let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA512, 
let_k_3)
[31:0]] @ (let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA511, 
let_k_3)
[31:0]] @ let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA510, 
let_k_3)
[31:0]]
)
)
), 
0x0000000A)
)
[7:0]
))  );
ASSERT( (LET let_k_0 = ((((((((((((((((((((((((const_arr3542 WITH [0x00000000] := 0x08)
 WITH [0x00000001] := 0x00)
 WITH [0x00000002] := 0x00)
 WITH [0x00000003] := 0x00)
 WITH [0x00000004] := 0xAB)
 WITH [0x00000005] := 0xAB)
 WITH [0x00000006] := 0xAB)
 WITH [0x00000007] := 0xAB)
 WITH [0x00000008] := 0xA8)
 WITH [0x00000009] := 0x47)
 WITH [0x0000000A] := 0x98)
 WITH [0x0000000B] := 0x57)
 WITH [0x0000000C] := 0xF7)
 WITH [0x0000000D] := 0x55)
 WITH [0x0000000E] := 0x00)
 WITH [0x0000000F] := 0x00)
 WITH [0x00000010] := 0x10)
 WITH [0x00000011] := 0x5B)
 WITH [0x00000012] := 0x65)
 WITH [0x00000013] := 0x56)
 WITH [0x00000014] := 0xF7)
 WITH [0x00000015] := 0x55)
 WITH [0x00000016] := 0x00)
 WITH [0x00000017] := 0x00)
,
let_k_1 = BVPLUS(64, 
0xFFFFAA08A8198490, 
IF(((((((((0x00 = A-data-stat2[0x00000008]
) AND (0x00 = A-data-stat2[0x00000009]
)
) AND (0x00 = A-data-stat2[0x0000000A]
)
) AND (0x00 = A-data-stat2[0x0000000B]
)
) AND (0x00 = A-data-stat2[0x0000000C]
)
) AND (0x00 = A-data-stat2[0x0000000D]
)
) AND (0x00 = A-data-stat2[0x0000000E]
)
) AND (0x00 = A-data-stat2[0x0000000F]
)
))
THEN 0x0000000000000000
ELSE 0x000055F757E67B80
ENDIF)
[31:0],
let_k_2 = ((((((((((((((((A-data-stat2 WITH [0x00000030] := 0x08)
 WITH [0x00000031] := 0x00)
 WITH [0x00000032] := 0x00)
 WITH [0x00000033] := 0x00)
 WITH [0x00000034] := 0x00)
 WITH [0x00000035] := 0x00)
 WITH [0x00000036] := 0x00)
 WITH [0x00000037] := 0x00)
 WITH [0x00000040] := 0x08)
 WITH [0x00000041] := 0x00)
 WITH [0x00000042] := 0x00)
 WITH [0x00000043] := 0x00)
 WITH [0x00000044] := 0x00)
 WITH [0x00000045] := 0x00)
 WITH [0x00000046] := 0x00)
 WITH [0x00000047] := 0x00)
,
let_k_3 = (let_k_0[BVPLUS(32, 
0x00000007, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000006, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000005, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000004, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000003, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000002, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000001, 
let_k_1)
] @ let_k_0[let_k_1]
)
)
)
)
)
)
) IN 
( NOT( BVGT((let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA507, 
let_k_3)
[31:0]] @ (let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA506, 
let_k_3)
[31:0]] @ (let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA505, 
let_k_3)
[31:0]] @ (let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA504, 
let_k_3)
[31:0]] @ (let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA503, 
let_k_3)
[31:0]] @ (let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA502, 
let_k_3)
[31:0]] @ (let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA501, 
let_k_3)
[31:0]] @ let_k_2[BVPLUS(64, 
0xFFFFAA08A99AA500, 
let_k_3)
[31:0]]
)
)
)
)
)
)
),0x0000000000000009)
)))  );
ASSERT( (LET let_k_0 = ((((((((((((((((((((((((const_arr3542 WITH [0x00000000] := 0x08)
 WITH [0x00000001] := 0x00)
 WITH [0x00000002] := 0x00)
 WITH [0x00000003] := 0x00)
 WITH [0x00000004] := 0xAB)
 WITH [0x00000005] := 0xAB)
 WITH [0x00000006] := 0xAB)
 WITH [0x00000007] := 0xAB)
 WITH [0x00000008] := 0xA8)
 WITH [0x00000009] := 0x47)
 WITH [0x0000000A] := 0x98)
 WITH [0x0000000B] := 0x57)
 WITH [0x0000000C] := 0xF7)
 WITH [0x0000000D] := 0x55)
 WITH [0x0000000E] := 0x00)
 WITH [0x0000000F] := 0x00)
 WITH [0x00000010] := 0x10)
 WITH [0x00000011] := 0x5B)
 WITH [0x00000012] := 0x65)
 WITH [0x00000013] := 0x56)
 WITH [0x00000014] := 0xF7)
 WITH [0x00000015] := 0x55)
 WITH [0x00000016] := 0x00)
 WITH [0x00000017] := 0x00)
,
let_k_1 = BVPLUS(64, 
0xFFFFAA08A8198490, 
IF(((((((((0x00 = A-data-stat2[0x00000008]
) AND (0x00 = A-data-stat2[0x00000009]
)
) AND (0x00 = A-data-stat2[0x0000000A]
)
) AND (0x00 = A-data-stat2[0x0000000B]
)
) AND (0x00 = A-data-stat2[0x0000000C]
)
) AND (0x00 = A-data-stat2[0x0000000D]
)
) AND (0x00 = A-data-stat2[0x0000000E]
)
) AND (0x00 = A-data-stat2[0x0000000F]
)
))
THEN 0x0000000000000000
ELSE 0x000055F757E67B80
ENDIF)
[31:0],
let_k_2 = BVPLUS(64, 
0xFFFFAA08A99AA508, 
(let_k_0[BVPLUS(32, 
0x00000007, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000006, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000005, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000004, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000003, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000002, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000001, 
let_k_1)
] @ let_k_0[let_k_1]
)
)
)
)
)
)
))
[31:0],
let_k_3 = ((((((((((((((((A-data-stat2 WITH [0x00000030] := 0x08)
 WITH [0x00000031] := 0x00)
 WITH [0x00000032] := 0x00)
 WITH [0x00000033] := 0x00)
 WITH [0x00000034] := 0x00)
 WITH [0x00000035] := 0x00)
 WITH [0x00000036] := 0x00)
 WITH [0x00000037] := 0x00)
 WITH [0x00000040] := 0x08)
 WITH [0x00000041] := 0x00)
 WITH [0x00000042] := 0x00)
 WITH [0x00000043] := 0x00)
 WITH [0x00000044] := 0x00)
 WITH [0x00000045] := 0x00)
 WITH [0x00000046] := 0x00)
 WITH [0x00000047] := 0x00)
,
let_k_4 = BVPLUS(32, 
0x00000001, 
let_k_2)
,
let_k_5 = BVPLUS(32, 
0x00000002, 
let_k_2)
,
let_k_6 = let_k_3[let_k_5],
let_k_7 = BVPLUS(32, 
0x00000003, 
let_k_2)
,
let_k_8 = let_k_3[let_k_7],
let_k_9 = (let_k_0[BVPLUS(32, 
0x00000007, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000006, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000005, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000004, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000003, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000002, 
let_k_1)
] @ (let_k_0[BVPLUS(32, 
0x00000001, 
let_k_1)
] @ let_k_0[let_k_1]
)
)
)
)
)
)
),
let_k_10 = ((((let_k_3 WITH [let_k_2] := 0x00)
 WITH [let_k_4] := ((let_k_8 @ (let_k_6 @ (let_k_3[let_k_4] @ let_k_3[let_k_2]
)
)
)[31:9] @ 0b000000000
)[15:8])
 WITH [let_k_5] := let_k_6)
 WITH [let_k_7] := let_k_8)
 IN 
((((((((0xFF = let_k_10[BVPLUS(64, 
0xFFFFAA08A99AA528, 
let_k_9)
[31:0]]
) AND (0x03 = let_k_10[BVPLUS(64, 
0xFFFFAA08A99AA529, 
let_k_9)
[31:0]]
)
) AND (0x00 = let_k_10[BVPLUS(64, 
0xFFFFAA08A99AA52A, 
let_k_9)
[31:0]]
)
) AND (0x00 = let_k_10[BVPLUS(64, 
0xFFFFAA08A99AA52B, 
let_k_9)
[31:0]]
)
) AND (0x00 = let_k_10[BVPLUS(64, 
0xFFFFAA08A99AA52C, 
let_k_9)
[31:0]]
)
) AND (0x00 = let_k_10[BVPLUS(64, 
0xFFFFAA08A99AA52D, 
let_k_9)
[31:0]]
)
) AND (0x00 = let_k_10[BVPLUS(64, 
0xFFFFAA08A99AA52E, 
let_k_9)
[31:0]]
)
) AND (0x00 = let_k_10[BVPLUS(64, 
0xFFFFAA08A99AA52F, 
let_k_9)
[31:0]]
)
))  );
%----------------------------------------------------
QUERY( FALSE  );
